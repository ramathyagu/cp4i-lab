<!DOCTYPE html>
<html><head>

<h1 id="getting-started">Cloud Pak for Integration Bootcamp/h1>
<p>===============</p>

<h2 id="familiarization-with-the-cloud-integration-platform">Familiarization with the Cloud Integration Platform<a class="anchorjs-link " href="#familiarization-with-the-cloud-integration-platform" aria-label="Anchor link for: familiarization with the cloud integration platform" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<p>The Cloud Integration Platform (CIP) is built on top of IBM Cloud 
Private.  This lab guide is meant to give you an overview of the 
capabilities of the platform, and get some hands on time with setting up
 your own environment for the purpose of creating your own demo 
environment.</p>

<p>This lab guide assumes some familiarity with IBM Cloud Private, Docker &amp; Kubernetes, as well as Helm.</p>

<p>There are two primary components of CIP:</p>

<p><strong>IBM Cloud Private (ICP)</strong> -  An application platform 
for developing and managing on-premises, containerized applications. It 
is an integrated environment for managing containers that includes the 
container orchestrator Kubernetes, a private image repository, a 
management console, and monitoring frameworks. In this particular boot 
camp, ICP is deployed on Softlayer, using Skytap as the primary 
operational interface.</p>

<p><strong>Platform Navigator</strong> –  an application that is built 
to run on top of IBM Cloud Private that provides a primary user 
interface where instances of App Connect Enterprise (ACE), API Connect 
(APIC), Event Streams and MQ Advanced can be managed from a single 
place.  It is automatically deployed with the CIP Bundle.</p>

<p>As a convention for these labs, a <span style="color:red"> <strong>red box</strong> </span>
 will be used to identify a particular area, and when information is to 
be entered and/or an action is to be taken, it will be in <strong>bold</strong> characters. <span style="color:red"> <strong>Red arrows or lines</strong> </span> may be used to indicate specific items that need to be noted as part of the lab</p>

<p>A number of sections will be labeled “Key Idea” or “Key Concept”. Be 
sure to review these sections when you come across them, as they will  
explain important items as it relates to the lab content.</p>

<h2 id="lab-overview">Lab Overview<a class="anchorjs-link " href="#lab-overview" aria-label="Anchor link for: lab overview" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<p>This lab is broken up into two key parts.</p>

<p><strong>Part One</strong>:  Create and Deploy your CIP Applications</p>

<p><strong>Part Two</strong>:  Deploy Integration Assets</p>

<p>Part one contains the hands on section of the lab where you will get 
acquainted with the Platform Navigator and be setting up the individual 
components of the platform.</p>

<p>Part two you will be deploying some basic assets to your newly created environment</p>

<h2 id="part-one-create-and-deploy-your-cip-applications">Part One: Create and Deploy your CIP Applications<a class="anchorjs-link " href="#part-one-create-and-deploy-your-cip-applications" aria-label="Anchor link for: part one create and deploy your cip applications" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<ol>
  <li>You have been provided a pre-installed environment of the Cloud 
Integration Platform.  It includes a vanilla ICP 3.1.1 install with the 
CIP Platform Navigator installed and all of the base container images 
that make up CIP.</li>
  <li>The environment you are using consists of 8 different nodes  7 of
 which are ICP Nodes and one is a developer image that you will be using
 to access the ICP User Interfaces.  You can access this VM directly 
using the Skytap interface to use the X-Windows based components.</li>
  <li><strong>VERY IMPORTANT</strong> It is very important you do not 
suspend your lab environment.  We have seen cases when the environment 
goes into suspend mode, the Rook-Ceph shared storage gets corrupted.  
Also it is a good practice that you shut down ICP before powering down 
your enviroment.  A script has been included to handle that for you that
 will be explained in the coming sections.  When you power down your 
environment, you can safely use the <code class="highlighter-rouge">power off</code>
 option as the shared storage can interfere with the normal graceful 
shutdown method.  So far using power off hasn’t caused any problems that
 we are aware of.</li>
  <li>You may also able to SSH into your environment.  You will find out 
the exact address to SSH to in your Skytap Environment window under <code class="highlighter-rouge">networking</code> and <code class="highlighter-rouge">published services</code>.  The Published Services set up for you will be for the SSH Port (22) under the <code class="highlighter-rouge">CIP Master</code> node.  The published service will look something like <code class="highlighter-rouge">services-uscentral.skytap.com:10000</code>.  Your environment will have a different port on it.  You can then SSH to to the machine from your local machine.</li>
  <li>Additionally, you can access the machine direct via the Skytap UI.
  This is functional, but can be cumbersome to work with as its not easy
 to copy and paste into and out of Skytap, especially for the non 
X-Windows based environments.</li>
  <li>Password-less SSH has also been enabled between the Master node and the other nodes in the environment.  <strong>note</strong> a table with the environment configuration is provided below.  Credentials for each machine are <code class="highlighter-rouge">skytap</code>/<code class="highlighter-rouge">A1rb0rn3</code>.</li>
</ol>

<table>
  <thead>
    <tr>
      <th>VM</th>
      <th>Hostname</th>
      <th>IP Address</th>
      <th># of CPU</th>
      <th>RAM</th>
      <th>Disk Space (LOCAL)</th>
      <th>Shared Storage</th>
      <th>Additional Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Master</td>
      <td>master/proxy</td>
      <td>10.0.0.1</td>
      <td>24</td>
      <td>32 GB</td>
      <td>350 GB</td>
      <td>N/A</td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>Worker 1</td>
      <td>worker-1</td>
      <td>10.0.0.2</td>
      <td>8</td>
      <td>16 GB</td>
      <td>370 GB</td>
      <td>Monitor</td>
      <td>Ceph Master</td>
    </tr>
    <tr>
      <td>Worker 2</td>
      <td>worker-2</td>
      <td>10.0.0.3</td>
      <td>8</td>
      <td>16 GB</td>
      <td>500 GB</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>Worker 3</td>
      <td>worker-3</td>
      <td>10.0.0.4</td>
      <td>8</td>
      <td>16 GB</td>
      <td>500 GB</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>Worker 4</td>
      <td>worker-4</td>
      <td>10.0.0.5</td>
      <td>8</td>
      <td>16 GB</td>
      <td>500 GB</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>Worker 5</td>
      <td>worker-5</td>
      <td>10.0.0.6</td>
      <td>8</td>
      <td>16 GB</td>
      <td>320 GB</td>
      <td>Ceph OSD1</td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>Worker 6</td>
      <td>worker-6</td>
      <td>10.0.0.7</td>
      <td>8</td>
      <td>16 GB</td>
      <td>320 GB</td>
      <td>Ceph OSD2</td>
      <td>&nbsp;</td>
    </tr>
    <tr>
      <td>Developer</td>
      <td>developer</td>
      <td>10.0.0.9</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
      <td>&nbsp;</td>
    </tr>
  </tbody>
</table>

<ol>
  <li>If it is not done already, power up your Environment.  It could 
take about 5 minutes for all nodes to start up.  The master node takes 
the longest to come up, so if you can see the login prompt from the 
Skytap UI on the master node, then you are good to go.</li>
  <li>It can take up to 30 minutes for the ICP Services to come up completely. You can tell if the start of ICP is complete by checking using one of these two methods:
    <ul>
      <li>Click on the Developer Machine, and it will take you directly 
to the Developer Machine running X-Windows.  Should you need to 
Authenticate, you can use the credentials of <code class="highlighter-rouge">student</code>/<code class="highlighter-rouge">Passw0rd!</code>. Bring up the Firefox browser.  Navigate to the main ICP UI by going to <code class="highlighter-rouge">https://10.0.0.1:8443</code>.  The credentials again are <code class="highlighter-rouge">admin/admin</code>.  If you can log in and see the main ICP Dashboard, you are good to go.</li>
      <li>Alternatively, click on the Master node.  Open a terminal. Execute an <code class="highlighter-rouge">su -</code> from the command line and when prompted for a password type in <code class="highlighter-rouge">Passw0rd!</code>. Execute a <code class="highlighter-rouge">cloudctl login</code> from the command line.  If all there services are up, it will prompt you for credentials (use <code class="highlighter-rouge">admin</code>/<code class="highlighter-rouge">admin</code>) and setup your kubernetes environment.</li>
    </ul>
  </li>
  <li>The best place to do your Kubernetes CLI work is from the Master node.  Again, Before you can execute any of the <code class="highlighter-rouge">kubectl</code> commands you will need to execute a <code class="highlighter-rouge">cloudctl login</code>.</li>
  <li>Next step is to find The Platform Navigator UI can be use to 
create and manage instances of all of the components that make up the 
Cloud Integration Platform. <strong>note</strong> at the time of this 
lab, the ability to create and manage Aspera instances has not yet be 
added to the Platform Navigator, and will be added at a later date.</li>
  <li>You can access the Platform Navigator using the browser on the 
developer machine.  The URL for the navigator was set up in this 
environment as: <code class="highlighter-rouge">https://mycluster.icp/integration</code>.  You might be asked to authenticate into ICP again, but once you do that you should now see the Platform Navigator page.</li>
  <li>The Platform Navigator is designed for you to easily keep track of
 your integration toolset.  Here you can see all of the various APIC, 
Event Streams, MQ and ACE instances you have running.  You can also add 
new instances using the Platform Navigator.</li>
  <li>Each application instance requires its own namespace and pull 
secret for install.  To support this lab, namespaces and pull secrets 
have been provided for you already, with the exception of Event Streams 
(ES).  We’ll talk more about ES later in the lab.</li>
</ol>

<h3 id="key-concepts---troubleshooting--recovery">Key Concepts - Troubleshooting / Recovery<a class="anchorjs-link " href="#key-concepts---troubleshooting--recovery" aria-label="Anchor link for: key concepts   troubleshooting  recovery" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h3>

<p>There are times where things may not be going right, so your best bet is to use <code class="highlighter-rouge">kubectl</code>
 commands to uncover more information about what is going on.  If you 
post queries in Slack about trouble with the lab, we will be asking you 
to execute a series of these, depending upon what you were doing, and 
what error occured.  A list of useful commands are provided below:</p>

<ul>
  <li><code class="highlighter-rouge">kubectl get pods -n &lt;some-namespace&gt;</code>
 This command shows all of the pods in a given name space.  Here you 
will see if any pods are up, down, errored or otherwise in transition.</li>
  <li><code class="highlighter-rouge">kubectl describe pods &lt;some-pod&gt; -n &lt;some-namespace&gt;</code> This will provide verbose information about a given pod.  You can use the <code class="highlighter-rouge">describe</code> command for other objects.</li>
  <li><code class="highlighter-rouge">kubectl logs &lt;some-object&gt; -n &lt;some-namespace&gt;</code> This command will work with other objects as well.  You can also tail the logs by using the <code class="highlighter-rouge">-f</code> switch at the end.</li>
</ul>

<p>If you happen to mess up an install of the components, its not 
difficult to recover.  You can use the ICP UI to remove the release or 
use the CLI by issuing <code class="highlighter-rouge">helm delete --purge &lt;helm-release-name&gt; --tls</code>.  Be careful using this though, as this process is not reversible.</p>

<p>Logging is also done inside of ICP using the ELK stack.  You can 
access the logging inside of ICP and use Elastic Search commands to 
drill into things.  For example, if you were to bring up Kibana and 
enter in a search like <code class="highlighter-rouge">kubernetes.namespace:&lt;your namespace&gt;</code>.  Using this along with the <code class="highlighter-rouge">kubectl</code> commands gives you a lot of power to dig into root cause.</p>

<p>There are plenty other commands to use, but these are by far the most
 common the author of these labs has used while setting these up :)</p>

<h2 id="app-connect-enterprise">App Connect Enterprise<a class="anchorjs-link " href="#app-connect-enterprise" aria-label="Anchor link for: app connect enterprise" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<ol>
  <li>Before we create a new Application Integration instance, you will need to delete the existing one.</li>
  <li>There a couple of ways to remove an installation via the UI or the CLI. Using the ICP UI (<code class="highlighter-rouge">https://10.0.0.1:8443</code>) go to the top left hamburger config menu select <code class="highlighter-rouge">Workloads</code> -&gt; <code class="highlighter-rouge">Helm Releases</code>.  Sort by namespace by clicking on the <code class="highlighter-rouge">NAMESPACE</code> header. You will see two deployments in the <code class="highlighter-rouge">ace</code> namespace, namely <code class="highlighter-rouge">inventory</code> and <code class="highlighter-rouge">ace</code>. For each of them in turn find the <code class="highlighter-rouge">action</code> icon on the far right (looks like 3 dots).  Click that and then select <code class="highlighter-rouge">Delete</code>.  ICP will remove all of the Pods that are part of this install.</li>
  <li>Before you can deploy a new Integration Server you need to re-sync your helm repository in ICP by going to the main ICP UI (https://10.0.0.1:8443) then from the top-left hamburger menu <code class="highlighter-rouge">Manage</code> &gt; <code class="highlighter-rouge">Helm Repositories</code>. Then Click on the <code class="highlighter-rouge">Sync Repositories</code>.</li>
  <li>Let’s start by creating an App Connect Enterprise Integration Server.  From the Platform Navigator, locate the middle panel for <code class="highlighter-rouge">Application Integration</code> and click on the <code class="highlighter-rouge">add new instance</code> link.</li>
  <li>A pop up window will give you some important information about pre-requisites for creating the instance.  Click <code class="highlighter-rouge">continue</code>.</li>
  <li>This will take you to the chart configuration.  If you scroll to 
the bottom, you can peruse the information about the chart you are about
 to use to create your instance of App Connect Enteprise.  Click the <code class="highlighter-rouge">Configure</code> button to configure your chart.  Other than the items listed below, we will be accepting the default values in the chart.</li>
  <li>Here you can fill in the information for install of your chart.  Give your helm release a <code class="highlighter-rouge">name</code>.  Call the release <code class="highlighter-rouge">ace-icip</code>.</li>
  <li>To the right of the <code class="highlighter-rouge">name</code> field, Select the <code class="highlighter-rouge">ace</code> namespace from the <code class="highlighter-rouge">Target Namespace</code> dropdown.</li>
  <li>Tick checkbox under <code class="highlighter-rouge">license</code></li>
  <li>Expand the <code class="highlighter-rouge">All Parameters</code> twisty</li>
  <li>Uncheck the box entitled <code class="highlighter-rouge">Production usage</code></li>
  <li>Set the <code class="highlighter-rouge">Replica count</code> to the value of <code class="highlighter-rouge">1</code></li>
  <li>Find the <code class="highlighter-rouge">Image Pull Secret</code> line.  Set that to <code class="highlighter-rouge">sa-ace</code> (This is pre-defined for you, normally, you would need to create this).</li>
  <li>For the <code class="highlighter-rouge">Hostname of the ingress proxy to be configured</code> section. Change the default value provided to <code class="highlighter-rouge">ace.10.0.0.1.nip.io</code>.</li>
  <li><strong>IMPORTANT</strong> - Find the <code class="highlighter-rouge">Enable Persistant Storage</code>
 Section.  This box must be unticked (disabled).  In order to support 
persistant storage, Gluster storage must be used (Ceph is not supported 
with ACE).  Implementing/Using Gluster Storage with CIP beyond the scope
 of this lab.</li>
  <li>Similarly uncheck the box for <code class="highlighter-rouge">Use dynamic provisioning</code></li>
  <li>Leave the other default values in the chart.  Scroll down and Click <code class="highlighter-rouge">Install</code> button on lower right portion of the screen.</li>
  <li>Once you see the <code class="highlighter-rouge">Installation Started</code> pop up. You can validate the progress via the <code class="highlighter-rouge">Helm Releases</code> in the ICP Portal or via the command line.</li>
  <li>Return to your command line and  open up a SSH session to your master node on your laptop or desktop.  <strong>Note</strong>
 Each environment has a Skytap Published Service set up for every node 
on port 22 so you can SSH to the nodes from your machine.  If you do a <code class="highlighter-rouge">kubectl get pods -n ace</code> you should see your pod in a running state.</li>
  <li>Returning to the Platform Navigator, you should see your new ACE 
instance there.  Click on it to bring up the ACE Enterprise UI.  <strong>Note</strong>  if you encounter issues with the self signed certs on the browser.  Click on the link where it says <code class="highlighter-rouge">open ace</code>.  This will open a new browser window and should allow you to access the UI properly.</li>
  <li>The ACE Dashboard can alternatively be accessed via a web browser 
and entering the URL for the ACE Dashboard Portal manually. Run the 
following commands to get the dashboard URL via SSH:</li>
</ol>

<p><code class="highlighter-rouge">export ACE_DASHBOARD_URL=$(kubectl 
get ingress ace-icip-ibm-ace-dashboard-icip-prod-hostname -o 
jsonpath="{.spec.rules[0].host}{.spec.rules[0].http.paths[0].path}")</code></p>

<p>then <code class="highlighter-rouge">echo "Open your web browser to https://${ACE_DASHBOARD_URL}"</code></p>

<p>your output will look something like:  <code class="highlighter-rouge">Open your web browser to https://ace.10.0.0.1.nip.io/ace-ace-icip</code></p>

<p><em>Hint</em> If the first command fails, you might not be in the <code class="highlighter-rouge">ace</code> namespace.  Quickest way to set your context is just to relogin using <code class="highlighter-rouge">cloudctl login</code> and then set your namespace to <code class="highlighter-rouge">ace</code>.</p>

<p>If you can see the App Connect Enterprise portal, then you are are done with this step.  We’ll load in a .bar file later.</p>

<h2 id="mq">MQ<a class="anchorjs-link " href="#mq" aria-label="Anchor link for: mq" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<ol>
  <li>For MQ we will not be using the default chart that is linked to 
the Platform Navigator.  What comes with the CIP is the production 
version of the chart that requires the installer to configure 
everything, which is cumbersome if you are just looking to spin up an 
environment quickly.  Fortunately, ICP comes with a chart that is 
designed specifically for developer types that comes with a 
pre-configured queue manager, queues, server channels and the like.</li>
  <li>Before continuing you will need to delete the existing MQ instance deployed on the platform. Just like in the previous section, using the ICP UI (<code class="highlighter-rouge">https://10.0.0.1:8443</code>) go to the 
top left hamburger config menu select <code class="highlighter-rouge">Workloads</code> -&gt; <code class="highlighter-rouge">Helm Releases</code>. Search for existing MQ deployments by using the Search widget and the <code class="highlighter-rouge">mq</code> keyword. Find the <code class="highlighter-rouge">action</code> icon on the 
far right (looks like 3 dots) of the returned instance.  Click that and then select <code class="highlighter-rouge">Delete</code>. If you get an <code class="highlighter-rouge">ESOCKETTIMEDOUT</code> error you can ignore that. Verify that the deployment is gone by refreshing your browser.</li>
  <li>Using the top menu, right hand side, click on <code class="highlighter-rouge">Catalog</code></li>
  <li>Using the context based search filter type in <code class="highlighter-rouge">mq</code>into the filter bar. Select the <code class="highlighter-rouge">ibm-mqadvanced-server-dev</code> chart.  You can scroll down a bit to peruse the pre-requisites.</li>
  <li>This will take you to the chart configuration.  If you scroll to 
the bottom, you can peruse the information about the chart you are about
 to use to create your instance of MQ.  Click the <code class="highlighter-rouge">Configure</code> button to configure your chart.  Other than the items listed below, we will be accepting the default values in the chart.</li>
  <li>Here you can fill in the information for install of your chart.  Give your helm release a <code class="highlighter-rouge">name</code>.  Call the release <code class="highlighter-rouge">mq-icip</code>.</li>
  <li>To the right of the <code class="highlighter-rouge">name</code> field, Select the <code class="highlighter-rouge">mq</code> namespace from the <code class="highlighter-rouge">Target Namespace</code> dropdown.</li>
  <li>Tick checkbox under <code class="highlighter-rouge">license</code></li>
  <li>Expand the <code class="highlighter-rouge">All Parameters</code> twisty</li>
  <li>Under the <code class="highlighter-rouge">Image Pull Secret</code> section enter in <code class="highlighter-rouge">sa-mq</code>.</li>
  <li>Under <code class="highlighter-rouge">Persistence</code> untick both <code class="highlighter-rouge">Enable Persistence</code> and <code class="highlighter-rouge">Use Dynamic Provisioning</code>.  <em>Note</em> failure to untick this will cause your install to fail.</li>
  <li>In the <code class="highlighter-rouge">Service Type</code> section, select <code class="highlighter-rouge">Node Port</code>.</li>
  <li>Scroll down to the <code class="highlighter-rouge">Queue Manager</code> settings and enter <code class="highlighter-rouge">admin</code> for both the <code class="highlighter-rouge">Admin</code> and <code class="highlighter-rouge">App</code> passwords.
  <li>You can leave the other settings as defaults.</li>
  <li>Click <code class="highlighter-rouge">Install</code> to start the process.</li>
  <li>You can monitor the installation from Helm Releases in the ICP UI or via the command line using <code class="highlighter-rouge">kubectl get pods -n mq</code>.  Once you see your pod up and running, you can navigate to the UI via <code class="highlighter-rouge">Workload</code> -&gt;<code class="highlighter-rouge">Helm releases</code>.  Find your MQ instance and click on it.</li>
  <li>Scroll down a bit and Locate the <code class="highlighter-rouge">Service</code> section.  Click on the  URL that is called <code class="highlighter-rouge">mq-icip-ibm-mq</code></li>
  <li>Under <code class="highlighter-rouge">Service Details</code> locate the URL called <code class="highlighter-rouge">console-https</code>.  This will start up the MQ Console.  Login with the credentials of <code class="highlighter-rouge">admin/admin</code></li>
  <li>You can now review your pre-configured MQ instance.</li>
</ol>

<h2 id="event-streams">Event Streams<a class="anchorjs-link " href="#event-streams" aria-label="Anchor link for: event streams" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<ol>
  <li>Before we create a new Event Streams instance, you will need to 
delete the existing Event Streams instance. However, this time we will also delete the namespace and included secrets just because we can :-)</li>
  <li>There a couple of ways to remove an installation.  We’ll do this using in two parts, one by UI, one by CLI. Using the ICP UI (<code class="highlighter-rouge">https://10.0.0.1:8443</code>) go to the top left hamburger config menu select <code class="highlighter-rouge">Workloads</code> -&gt; <code class="highlighter-rouge">Helm Releases</code>.  Locate the <code class="highlighter-rouge">eventstreams</code> install. <em>Hint</em> you can filter releases using the search bar at the top.    Find the <code class="highlighter-rouge">action</code> icon on the far right (looks like 3 dots).  Click that and then select <code class="highlighter-rouge">Delete</code>.  ICP will remove all of the Pods that are part of this install.</li>
  <li>Next we will remove the old namespace. Lets do that via the command line.  Connect to your master node via SSH.  Login via <code class="highlighter-rouge">cloudctl login</code> if you have to.  Select default namespace.</li>
  <li>Delete the namespace as follows  <code class="highlighter-rouge">kubectl delete namespace eventstreams</code>.  Deleting the namespace should be fairly quick.</li>
  <li>Now lets recreate the namespace.  Do this via <code class="highlighter-rouge">kubectl create namespace eventstreams</code></li>
  <li>Change context to this new namespace by issuing <code class="highlighter-rouge">kubectl config set-context mycluster-context --user=admin --namespace=eventstreams</code></li>
  <li>re-create your pullsecret then by issuing: <code class="highlighter-rouge">kubectl
 create secret docker-registry sa-eventstreams --docker-server=mycluster.icp:8500 
--docker-username=admin --docker-password=admin --docker-email=admin</code></li>
  <li>Return back to the Developer Machine via Skytap.  Bring up the Platform Navigator again.  Locate the panel on the far right for <code class="highlighter-rouge">Messaging</code> and click on the <code class="highlighter-rouge">add new instance</code> link and then select <code class="highlighter-rouge">New Event Streams</code> instance.</li>
  <li>Similar to the other instances you have setup, you will have a pop
 up that gives you some advice on requirements for install.  Click <code class="highlighter-rouge">continue</code></li>
  <li>Like before Click <code class="highlighter-rouge">Configure</code> 
in the lower right hand corner. Here we will configure the chart for 
install.  Other than the items listed below, we will be accepting the 
default values in the chart.</li>
  <li>Under <code class="highlighter-rouge">Helm Releases</code> call it <code class="highlighter-rouge">eventstreams-cip</code></li>
  <li>Set the <code class="highlighter-rouge">Target Namespace</code> to <code class="highlighter-rouge">eventstreams</code></li>
  <li>Tick the checkbox under <code class="highlighter-rouge">License</code></li>
  <li>Moving down, set the <code class="highlighter-rouge">Image Pull Secret</code> to <code class="highlighter-rouge">sa-eventstreams</code></li>
  <li>Click the <code class="highlighter-rouge">All Parameters</code> Twisty</li>
  <li>Under the Global Install Parameters heading, make sure the <code class="highlighter-rouge">Used in Production</code> box in unchecked.</li>
  <li>Modify the <code class="highlighter-rouge">Docker Image Registry</code> entry by removing the last trailing ‘/’ character.  e.g. <code class="highlighter-rouge">mycluster.icp:8500/eventstreams</code>.  This is a design feature of this initial release, and will be fixed later.</li>
  <li>Moving down, make sure all of <code class="highlighter-rouge">persistent storage</code> and <code class="highlighter-rouge">dynamic provisioning</code> checkboxes are unchecked.</li>
  <li>That is the last change.  Click the <code class="highlighter-rouge">Install</code> button on the lower right.</li>
  <li>Check the progress of the install using the command line (via SSH) to the master node.  <code class="highlighter-rouge">kubectl get pods -n eventstreams</code>.  Use the <code class="highlighter-rouge">watch</code> prefix to monitor the pods so you don’t have to keep repeating the same command. If you see all the pods up properly then you are good to go. It 
should take only a few minutes to spin up all of the required pods.</li>
  <li>You can access the management interface by returning back to the Platform Navigator UI <code class="highlighter-rouge">https://mycluster.icp/integration</code> on the Developer Machine. You should see a link to your newly deployed Eventstreams instance. From there you can explore the various configuration options within event streams</li>
</ol>

<h2 id="api-connect-install">API Connect Install<a class="anchorjs-link " href="#api-connect-install" aria-label="Anchor link for: api connect install" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<ol>
  <li>To install API Connect, there are a few items that are needed in 
order to properly configure your ICP environment for install.  These are
 listed below
    <ul>
      <li>Persistant Storage (Ceph is required, and has been set up for you already)</li>
      <li>7 FQDN’s for the various UIs/Portal of API Connect</li>
    </ul>
  </li>
  <li>Below is a list of the FQDN’s you will be using for this configuration.</li>
</ol>

<h3 id="api-connect-management">API Connect Management<a class="anchorjs-link " href="#api-connect-management" aria-label="Anchor link for: api connect management" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h3>
<p><strong>Platform API Endpoint:</strong>   <code class="highlighter-rouge">mgmt.10.0.0.1.nip.io</code></p>

<p><strong>Consumer API Endpoint:</strong>   <code class="highlighter-rouge">mgmt.10.0.0.1.nip.io</code></p>

<p><strong>Cloud Admin UI Endpoint:</strong> <code class="highlighter-rouge">mgmt.10.0.0.1.nip.io</code></p>

<p><strong>API Manager UI Endpoint:</strong> <code class="highlighter-rouge">mgmt.10.0.0.1.nip.io</code></p>

<h3 id="api-connect-portal">API Connect Portal<a class="anchorjs-link " href="#api-connect-portal" aria-label="Anchor link for: api connect portal" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h3>
<p><strong>Portal Director API Endpoint:</strong> <code class="highlighter-rouge">pd.10.0.0.1.nip.io</code></p>

<p><strong>Portal Web UI Endpoint:</strong>       <code class="highlighter-rouge">pw.10.0.0.1.nip.io</code></p>

<h3 id="api-connect-analytics">API Connect Analytics<a class="anchorjs-link " href="#api-connect-analytics" aria-label="Anchor link for: api connect analytics" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h3>
<p><strong>Analytics Ingestion API Endpoint:</strong> <code class="highlighter-rouge">ai.10.0.0.1.nip.io</code></p>

<p><strong>Analytics Client API Endpoint:</strong>    <code class="highlighter-rouge">ac.10.0.0.1.nip.io</code></p>

<h3 id="api-connect-gateway">API Connect Gateway<a class="anchorjs-link " href="#api-connect-gateway" aria-label="Anchor link for: api connect gateway" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h3>
<p><strong>Gateway Service Endpoint:</strong> aka Management Endpoint <code class="highlighter-rouge">gws.10.0.0.1.nip.io</code></p>

<p><strong>API Gateway Endpoint:</strong> aka API Invocation Endpoint       <code class="highlighter-rouge">apigw.10.0.0.1.nip.io</code></p>

<ol>
  <li>From the Master, as root issue the command <code class="highlighter-rouge">cloudctl login -u admin -p admin -n apic</code> </li>
  <li>Check the name of the APIC helm release using <code class="highlighter-rouge">helm ls --tls | grep api</code> (it should be something like <code class="highlighter-rouge">api5</code>)</li>
  <li>Delete the APIC helm release using <code class="highlighter-rouge">helm delete --purge name_of_apic_release_from_above --tls</code> (this command will take a little while to complete)</li>
  <li>Delete all stateful sets, persistent volume claims, and jobs related to the APIC instance using <code class="highlighter-rouge">kubectl delete sts,job,pvc --all -n apic</code></li>
  <li>Verify all pods and jobs are gone from the namespace using <code class="highlighter-rouge">kubectl get pods -n apic</code></li>
  <li>Return to the Developer Machine and bring up the Platform Navigator.  On the left hand side of the screen locate the <code class="highlighter-rouge">API Lifecycle and Secure Access</code> section.  At the bottom of this section, locate and click on the <code class="highlighter-rouge">Add new instance</code> link.</li>
  <li>A pop up will come up, giving you some information about setting up the instance.  Click <code class="highlighter-rouge">Continue</code>.</li>
  <li>Click on the <code class="highlighter-rouge">Configuration</code> heading.  Other than the items listed below, we will be accepting the default values in the chart.</li>
  <li>Set the <code class="highlighter-rouge">Helm Release</code> to <code class="highlighter-rouge">apic-cip</code>.</li>
  <li>Moving to the right, set the <code class="highlighter-rouge">Target Namespace</code> from the dropdown to <code class="highlighter-rouge">apic</code></li>
  <li>Tick the checkbox under <code class="highlighter-rouge">License</code></li>
  <li>Under the <code class="highlighter-rouge">Parameters</code> heading.  Set the <code class="highlighter-rouge">Registry Secret</code> to <code class="highlighter-rouge">sa-apic</code>.</li>
  <li>Set <code class="highlighter-rouge">Storage Class</code> to <code class="highlighter-rouge">rbd-storage-class</code> This is your Ceph Storage class name. <strong>NOTE</strong> it is very important that this setting is correct, otherwise the setup of the shared storage volumes will fail.  <strong>Note</strong> you can issue a <code class="highlighter-rouge">kubectl get pvc -n apic</code>
 once you kick off the install of your chart to see how the shared space
 is being used by APIC and if there are any problems e.g. if you see an 
entry in a <code class="highlighter-rouge">pending</code> state for an extended period of time.</li>
  <li>Set the <code class="highlighter-rouge">Helm TLS Secret</code> to <code class="highlighter-rouge">helm-tls-secret</code></li>
  <li>Continuing on, under the <code class="highlighter-rouge">Management</code> heading.  Here you need to fill in the four different management headings as per the chart in step 2 above.</li>
  <li>Continue with the same process for the <code class="highlighter-rouge">Portal</code>, <code class="highlighter-rouge">Analytics</code> and <code class="highlighter-rouge">Gateway</code> sections.  Follow the chart above and enter in the values for each of the above values in the FQDN list in Step 2.</li>
  <li>When done, click the <code class="highlighter-rouge">All Parameters</code> twisty.</li>
  <li>Scroll up a bit and make sure the <code class="highlighter-rouge">Production Deployment</code> box is not checked</li>
  <li>Under the <code class="highlighter-rouge">Global</code> heading, select the <code class="highlighter-rouge">Mode</code> drop down, and set the value to <code class="highlighter-rouge">dev</code>.</li>
  <li>Scroll down a bit and located the <code class="highlighter-rouge">Cassandra</code> heading.  Set that value of <code class="highlighter-rouge">Cluster Size</code> to the value of <code class="highlighter-rouge">1</code>.</li>
  <li>Scroll down some more to the <code class="highlighter-rouge">Gateway</code> section.  Set the <code class="highlighter-rouge">Replica Count</code> to the value of <code class="highlighter-rouge">1</code>.</li>
  <li>That completes the chart configuration.  Click the <code class="highlighter-rouge">Install</code>
 button to start the process.  The Entire Process to install API Connect
 can take up to 30 minutes to spin up all of the pods.  You can monitor 
things using the watch command e.g. <code class="highlighter-rouge">watch -n 10 kubectl get pods -n apic</code>.</li>
</ol>

<h2 id="api-connect-configuration">API Connect Configuration<a class="anchorjs-link " href="#api-connect-configuration" aria-label="Anchor link for: api connect configuration" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<ol>
  <li>These next steps are the standard setup steps for intializing the APIC topology and configuring a provider organization.</li>
    <li>On the Developer Machine open a browser tab and access <code class="highlighter-rouge">https://mgmt.10.0.0.1.nip.io/admin</code>. <em>Note:</em> if you get an HSTS error then clear your entire browser history (in particular <em>Site Preferences</em>) and restart the browser. Once the Admin Portal comes up, you can log in with <code class="highlighter-rouge">admin/7iron-hide</code>.  You will be logged in and forced to change your password.  Set it to whatever you like, but don’t forget it.</li>
  <li>You will now be placed into the Cloud Manager Portal.  Click the link to <code class="highlighter-rouge">Configure Topology</code></li>
  <li>Click on <code class="highlighter-rouge">Register Service</code></li>
  <li>Select <code class="highlighter-rouge">Datapower Gateway v5 Compatible</code></li>
    <li>Under Gateway details give the gateway a <code class="highlighter-rouge">Title</code> and then under <code class="highlighter-rouge">Management Endpoint</code> set that value to <code class="highlighter-rouge">https://gws.10.0.0.1.nip.io</code></li>
    <li>Set the <code class="highlighter-rouge">API Invocation endpoint</code> to <code class="highlighter-rouge">https://apigw.10.0.0.1.nip.io</code>.  Click <code class="highlighter-rouge">Save</code></li>
  <li>Back on the Topology screen, click <code class="highlighter-rouge">Register Service</code> and then select <code class="highlighter-rouge">Analytics</code>.</li>
  <li>Set the Title to whatever you like and then change the <code class="highlighter-rouge">management endpoint</code> to <code class="highlighter-rouge">https://ac.10.0.0.1.nip.io</code>.  Click <code class="highlighter-rouge">Save</code>.</li>
    <li>Before registering the Portal service you need to setup Notifications. From the taskbar on the left hand side select <code class="highlighter-rouge">Resources</code> then <code class="highlighter-rouge">Notifications</code> followed by <code class="highlighter-rouge">Create</code>. Give it a <code class="highlighter-rouge">Title</code> and type in <code class="highlighter-rouge">10.0.0.9</code> for the <code class="highlighter-rouge">Address</code> and <code class="highlighter-rouge">2525</code> for the <code class="highlighter-rouge">port</code> and leave the remaining fields blank.</li>
    <li>At the same time open a terminal, run <code class="highlighter-rouge">java -jar fakeSMTP-2.0.jar</code> from the ~/fakesmtp directory and click <code class="highlighter-rouge">Start server</code>. Back in the APIC console, click <code class="highlighter-rouge">Save</code></li>
    <li>From the taskbar, select <code class="highlighter-rouge">Settings</code> -&gt; <code class="highlighter-rouge">Notifications</code></li>
  <li>Under Sender &amp; Email Server click <code class="highlighter-rouge">Edit</code>.</li>
  <li>Enter in a <code class="highlighter-rouge">Name</code> and <code class="highlighter-rouge">Email</code> for your Admin user, this can be anything.</li>
  <li>Down below, select the email server you configured above and click <code class="highlighter-rouge">Save</code></li>
  <li>From the Topology screen, click <code class="highlighter-rouge">Register Service</code> then select <code class="highlighter-rouge">Portal</code>.  <em>Note</em> this doesn’t create a portal yet - it just registers the service.</li>
    <li>Set the Title to whatever you like then change the <code class="highlighter-rouge">Management Endpoint</code> to <code class="highlighter-rouge">https://pd.10.0.0.1.nip.io</code> and the <code class="highlighter-rouge">Portal Website URL</code> to <code class="highlighter-rouge">https://pw.10.0.0.1.nip.io</code>.  Click <code class="highlighter-rouge">Save</code></li>
  <li>You can then associate the analytics service to the gateway service by clicking on the <code class="highlighter-rouge">Associate Analytics</code> link.</li>
  <li>From the top left menu - go to <code class="highlighter-rouge">Provider Organizations</code>.</li>
  <li>Click <code class="highlighter-rouge">Add</code> -&gt; <code class="highlighter-rouge">Invite Organization Owner</code>.  Enter in a email address, use something different here.</li>
  <li>Once you see the activation link, click on it.  Copy the link and paste it to a new browser tab window on the developer machine.</li>
  <li>No need to fill out any of the information that pops up, API 
Connect will grab your credentials from ICP, so going forward the API 
Manager UI will use SSO facilitated via ICP.</li>
  <li>You will automatically be logged into the API Manager.  From here you can continue with the next section.</li>
</ol>

<h2 id="part-two-deploy-some-integration-assets">Part Two: Deploy some Integration Assets<a class="anchorjs-link " href="#part-two-deploy-some-integration-assets" aria-label="Anchor link for: part two deploy some integration assets" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h2>

<ol>
  <li>Load up the management page for your ACE install.  You can access it from the Platform Navigator by clicking on your <code class="highlighter-rouge">ace</code> install or just direct your browser to <code class="highlighter-rouge">https://mycluster.icp/ace-ace-icip/</code></li>
    <li>Click on the <code class="highlighter-rouge">+Server</code> button and then on <code class="highlighter-rouge">Add a BAR file</code>.  On the local file system, navigate to the <code class="highlighter-rouge">/home/student/techguides</code> directory and find the lone bar file which should be <code class="highlighter-rouge">RESTRequest_Everything.bar</code>.  A pop up with a content URL will come up.  Copy this to your clipboard.  You will need it for the next step.</li>
  <li>You will now deploy your bar file using the ACE chart, so you will
 be taken to the chart configuration screen in ICP.  Click the <code class="highlighter-rouge">Configure</code> button or the <code class="highlighter-rouge">Configuration</code> tab at the top to continue</li>
  <li>Set the <code class="highlighter-rouge">Helm Release</code> to <code class="highlighter-rouge">lab</code></li>
  <li>Change the <code class="highlighter-rouge">Target Namespace</code> to <code class="highlighter-rouge">ace</code></li>
  <li>Tick the <code class="highlighter-rouge">License</code> checkbox</li>
  <li>Click on the <code class="highlighter-rouge">All Parameters</code> twisty to open it up</li>
  <li>Paste in the URL given to you above <code class="highlighter-rouge">Content Server URL</code></li>
  <li>Untick the <code class="highlighter-rouge">Production Usage</code> checkbox</li>
    <li>Set the <code class="highlighter-rouge">Replica Count</code> to <code class="highlighter-rouge">1</code></li>
  <li>Set the <code class="highlighter-rouge">Image Pull Secret</code> to <code class="highlighter-rouge">sa-ace</code></li>
  <li>Untick the <code class="highlighter-rouge">Enable Persistence</code> and <code class="highlighter-rouge">Use Dynamic Provisioning</code> checkboxes.</li>
  <li>Under the <code class="highlighter-rouge">Service</code> settings, find the <code class="highlighter-rouge">NodePort IP</code> change this to <code class="highlighter-rouge">lab.10.0.0.1.nip.io</code>.  This will be the endpoint for your service running on ACE.</li>
    <li>Scroll down to the <code class="highlighter-rouge">Integration Server</code> section and make sure all the names, passwords, and aliases fields are blank</li>
  <li>Leave the remaining settings as defaults and then click <code class="highlighter-rouge">Install</code> at the bottom.  Your chart will now install.  You can view the progress of the install via Helm Releases as prompted or use <code class="highlighter-rouge">kubectl</code>.</li>
  <li>Return back to your ACE Management UI. (Click the <code class="highlighter-rouge">done</code>
 on the window from the previous step).  You should now see one service 
running on your integration server.  Click on the 3 dot hamburger button
 on the <code class="highlighter-rouge">lab</code> icon.  Click Open.</li>
  <li>You will now see 3 icons, one for the REST Request API, 
Application and Shared Library.  Click on the hamburger icon for REST 
Request_API and then click open</li>
  <li>
    <p>You will then see two URL’s that look something (but not exactly) like this:</p>

    <ul>
      <li>REST API Base URL <code class="highlighter-rouge">http://lab.10.0.0.1.nip.io:30098/restrequest_api/v1</code></li>
      <li>OpenAPI document <code class="highlighter-rouge">http://lab.10.0.0.1.nip.io:30098/restrequest_api/v1/Tutorial_swagger.json</code></li>
    </ul>
  </li>
</ol>

<p>Copy and paste the link for the OpenAPI document into a browser 
window and then save the json file on the local file system.  We will 
use this inside of API Connect</p>

<ol>
  <li>Open up your API Manager Window inside the developer machine - <code class="highlighter-rouge">https://mgmt.10.0.0.1.nip.io/manager</code>.  The login should happen automatically as it will use your ICP credentials for login.</li>
  <li>Click on the <code class="highlighter-rouge">Manage Catalogs</code></li>
  <li>Click on <code class="highlighter-rouge">Sandbox</code></li>
  <li>Click on <code class="highlighter-rouge">Settings</code> from left menu</li>
  <li>Click on <code class="highlighter-rouge">Gateway Services</code></li>
  <li>Click <code class="highlighter-rouge">edit</code> and choose <code class="highlighter-rouge">Gateway</code>.</li>
  <li>From the API Manager homescreen, use the menu on the left to navigate to <code class="highlighter-rouge">Develop</code>.</li>
  <li>On the APIs and Products screen click <code class="highlighter-rouge">add</code> -&gt; <code class="highlighter-rouge">Api</code></li>
  <li>Select the <code class="highlighter-rouge">From Existing API Service</code> radio button option.  Click <code class="highlighter-rouge">Next</code>.</li>
  <li>Click the <code class="highlighter-rouge">browse</code> button to navigate to the <code class="highlighter-rouge">Tutorial_swagger.json</code> file on your file system you had saved previously.</li>
  <li>Click <code class="highlighter-rouge">Next</code></li>
  <li>Review the settings then click <code class="highlighter-rouge">Next</code> twice (do not activate the API yet).</li>
  <li>Review the summary to ensure the API was created properly, and then click the <code class="highlighter-rouge">Edit API</code> button.</li>
  <li>Click the <code class="highlighter-rouge">Assemble</code> tab to bring up the Assembly editor.</li>
  <li>Click the Play button to start the Test tool.</li>
  <li>Click the blue <code class="highlighter-rouge">Activate API</code> button to deploy.</li>
  <li>Select the <code class="highlighter-rouge">get /UserNumber</code> operation.</li>
  <li>Scroll down to the <code class="highlighter-rouge">Parameters</code> section and find the <code class="highlighter-rouge">UserNumber</code> - replace what is there with the number <code class="highlighter-rouge">1</code>.</li>
  <li>Scroll down and click the <code class="highlighter-rouge">Invoke</code>
 button.  The first time you invoke this, it will bring up a CORS 
warning.  Copy and paste the link for the API into a new browser tab.  
It will return a 401 error for authorization, but this will load up the 
cert.</li>
  <li>Run the invoke again, and you should see the output properly.</li>
</ol>

<h3 id="conclusion">Conclusion<a class="anchorjs-link " href="#conclusion" aria-label="Anchor link for: conclusion" data-anchorjs-icon="" style="font-family: anchorjs-icons; font-style: normal; font-variant: normal; font-weight: normal; line-height: 1; padding-left: 0.375em;"></a></h3>
<p>You have completed the initial CIP Labs by taking a base ICP install 
and then imported some basic integration assets and exposed that as an 
API running on the configuration.  The key value is having the single 
platform that runs all of the capability that can be managed easily, 
user the power of Kubernetes.</p>

<p><strong>End of Lab</strong></p>

</body></html>
